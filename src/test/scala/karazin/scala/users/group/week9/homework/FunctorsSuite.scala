package karazin.scala.users.group.week9.homework

/*

  Write test for a compound functors
  Implemented tests with autogenerated values

  The test implementation is tricky
  and for now there is no good solution
  but try to do your best

 */

import scala.concurrent.Future
import scala.concurrent.duration.Duration
import scala.concurrent.Await
import scala.concurrent.ExecutionContext.Implicits.global
import cats.Functor
import cats.implicits._
import munit.ScalaCheckSuite
import org.scalacheck._
import Prop.{forAll, propBoolean}
import scala.util.{Failure, Success, Try}
import scala.language.postfixOps
import math.Fractional.Implicits.infixFractionalOps
import math.Integral.Implicits.infixIntegralOps
import math.Numeric.Implicits.infixNumericOps
import munit.Clue.generate
import karazin.scala.users.group.week9.homework.functors._
import karazin.scala.users.group.week9.homework.functors._

object FunctorsSuite extends Properties("Functors suite"):

  property("sum test") = forAll { (value: Future[List[Try[Option[Int]]]], adder: Int) => 
    val customFuture = (
      value map { list =>
        list map { elem => 
          elem map { opt => 
            opt map { (vl: Int) => 
              vl + adder 
            } 
          }
        }
      }
    )
    val adderFutureCompleted = Try(Await.result(adderFunc(value, adder), Duration.Inf))
    val customFutureCompleted = Try(Await.result(customFuture, Duration.Inf))
    adderFutureCompleted == customFutureCompleted
  }

  property("mul test") = forAll { (value: Future[List[Try[Option[Int]]]], multiplier: Int) =>
    val customFuture = (
      value map { list =>
        list map { elem =>
          elem map { opt =>
            opt map { (vl: Int) =>
              vl * multiplier
            }
          }
        }
      }
    )
    val multiplierFutureCompleted = Try(Await.result(multiplierFunc(value, multiplier), Duration.Inf))
    val customFutureCompleted = Try(Await.result(customFuture, Duration.Inf))
    multiplierFutureCompleted == customFutureCompleted
  }
  
end FunctorsSuite